#!/usr/bin/env python3

# Custom topology for Mininet, generated by gentopo.py.

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.node import Node
from mininet.node import OVSSwitch
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.util import dumpNodeConnections
from functools import partial
from collections import defaultdict, OrderedDict
import utils.ipv4
class Mynet(Topo):
    def build(self):
        switches = {}
        def add(l: int, subnet: str, *names: str):
            for i, name in enumerate(names):
                host = self.addHost(name, ip=utils.ipv4.get_nth_host(subnet, i))
                switch = self.addSwitch("s{}".format(i + l + 1))
                switches[name] = switch
                self.addLink(host, switch)

        def link(s1: str, s2: str, delay: int):
            self.addLink(switches[s1], switches[s2], bw=10, delay="{}ms".format(delay))

        add(0, "10.12.0.0/16", "ucla1", "usc1")
        add(2, "10.10.0.0/17", "illinois", "wisconsin", "purdue", "ucla2", "usc2")
        add(7, "10.10.128.0/17", "psu")

        link("ucla1", "usc1", 2)
        link("ucla1", "ucla2", 1)
        link("usc1", "usc2", 1)
        link("illinois", "ucla2", 43)
        link("illinois", "purdue", 4)
        link("illinois", "wisconsin", 7)
        link("wisconsin", "usc2", 46)
        link("purdue", "psu", 34)


# the following code produces an executable script working with a remote controller
# and providing ssh access to the the mininet hosts from within the ubuntu vm
controller_ip = ''

def setupNetwork(controller_ip):
    "Create network and run simple performance test"
    # check if remote controller's ip was set
    # else set it to localhost
    topo = Mynet()
    switch = partial(OVSSwitch, protocols='OpenFlow10')
    if controller_ip == '':
        #controller_ip = '10.0.2.2';
        controller_ip = '127.0.0.1';
    net = Mininet(topo=topo, switch=switch, controller=lambda a: RemoteController( a, ip=controller_ip, port=6633 ), link=TCLink)
    return net

def connectToRootNS( network, switch, ip, prefixLen, routes ):
    "Connect hosts to root namespace via switch. Starts network."
    "network: Mininet() network object"
    "switch: switch to connect to root namespace"
    "ip: IP address for root namespace node"
    "prefixLen: IP address prefix length (e.g. 8, 16, 24)"
    "routes: host networks to route to"
    # Create a node in root namespace and link to switch 0
    root = Node( 'root', inNamespace=False )
    intf = TCLink( root, switch ).intf1
    root.setIP( ip, prefixLen, intf )
    # Start network that now includes link to root namespace
    network.start()
    # Add routes from root ns to hosts
    for route in routes:
        root.cmd( 'route add -net ' + route + ' dev ' + str( intf ) )

def sshd( network, cmd='/usr/sbin/sshd', opts='-D' ):
    "Start a network, connect it to root ns, and run sshd on all hosts."
    switch = network.switches[ 0 ]  # switch to use
    ip = '10.123.123.1'  # our IP address on host network
    routes = [ '10.0.0.0/8' ]  # host networks to route to
    connectToRootNS( network, switch, ip, 8, routes )
    for host in network.hosts:
        host.cmd( cmd + ' ' + opts + '&' )

    dumpNodeConnections(network.hosts)

    CLI( network )
    for host in network.hosts:
        host.cmd( 'kill %' + cmd )
    network.stop()




# by zys
def start_network(network):
    network.start()

    dumpNodeConnections(network.hosts)

    CLI( network )
    network.stop()

if __name__ == '__main__':
    setLogLevel('info')
    #setLogLevel('debug')
    # sshd( setupNetwork(controller_ip) )
    start_network(setupNetwork(controller_ip))
